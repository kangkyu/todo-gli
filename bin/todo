#!/usr/bin/env ruby
require 'gli'
require 'todo'

include GLI::App

program_desc ''

subcommand_option_handling :normal
arguments :strict

desc 'Path to the todo file'
default_value "#{ENV['HOME']}/.todo.txt"
arg_name 'todo_file'
flag [:f,:filename]

desc 'Create a new task in the task list'
long_desc "
A task has a name and a priority. By default, new tasks have the lowest possible priority, though this can be overriden.
"
arg_name 'task_name'
command :new do |c|
  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.flag :p

  c.desc 'put the new task first in the list'
  c.switch :f

  c.action do |global_options,options,args|
    new_tasks = args
    filename = global_options[:f]
    # puts options[:f]
    # puts options[:p]
    File.open(filename, 'a') do |file|
      new_tasks.each do |new_task|
        write_todo(file,new_task,Time.now.strftime("%F %H:%M"),'')
      end
      puts "Task added."
    end
  end
end

desc 'List tasks'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
    filename = global_options[:f]
    File.open(filename, 'r') do |file|
      counter = 1
      file.readlines.each do |line|
        name,created,completed = read_todo(line)
        printf("%3d - %s\n",counter,name) #
        printf("      Created:   %s\n",created) #
        unless completed.nil? #
          printf("      Completed: %s\n",completed) #
        end #
        counter += 1
      end
    end
  end
end

desc 'Complete a task'
arg_name 'Describe arguments to done here'
command :done do |c|
  c.action do |global_options,options,args|
    puts "done command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
